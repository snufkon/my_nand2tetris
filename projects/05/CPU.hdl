// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    /**
     * A or C instruction
     *   : instruction[15]
     * a : instruction[12]
     * c1: instruction[11]
     * c2: instruction[10]
     * c3: instruction[9]
     * c4: instruction[8]
     * c5: instruction[7]
     * c6: instruction[6]
     * d1: instruction[5]
     * d2: instruction[4]
     * d3: instruction[3]
     * j1: instruction[2]
     * j2: instruction[1]
     * j3: instruction[0]
     **/


    // control bit of memory write
    And(a=instruction[15], b=instruction[3], out=writeM);

    // control bit of A register load
    Not(in=instruction[15], out=out1);
    And(a=instruction[15], b=instruction[5], out=out2);
    Or(a=out1, b=out2, out=loadA);

    // control bit of D register load
    And(a=instruction[15], b=instruction[4], out=loadD);
    
    // A register
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=out3);
    ARegister(in=out3, load=loadA, out=outA, out[0..14]=addressM);

    // D register
    DRegister(in=outALU, load=loadD, out=outD);

    // ALU
    Mux16(a=outA, b=inM, sel=instruction[12], out=outAorM);
    ALU(x=outD, y=outAorM, zx=instruction[11], nx=instruction[10],
                           zy=instruction[9],  ny=instruction[8],
                           f=instruction[7],   no=instruction[6],
                           zr=zr, ng=ng, out=outALU, out=outM);

    // control bit of PC load
    And(a=instruction[2], b=ng, out=lowerJump);
    And(a=instruction[1], b=zr, out=equalJump);
    Or(a=ng, b=zr, out=out4);
    Not(in=out4, out=out5);
    And(a=instruction[0], b=out5, out=greaterJump);
    Or(a=lowerJump, b=equalJump, out=lowerEqualJump);
    And(a=instruction[15], b=greaterJump, out=out6);
    Or(a=lowerEqualJump, b=out6, out=jump);

    // PC
    PC(in=outA, load=jump, inc=true, reset=reset, out[0..14]=pc);
}